{"version":3,"sources":["assets/coffin.mp4","assets sync nonrecursive //.(png|jpe?g|svg)$","assets/corona.png","assets/coronavirus.png","assets/stare.png","SwipePage.js","serviceWorker.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","Example","props","state","data","openDialog","failChecker","missCounter","myArray","tempData","i","push","Math","floor","random","length","this","setState","console","log","includes","tempCount","images","r","item","index","replace","importAll","require","autoPlay","loop","src","coffin_video","width","style","backgroundImage","backgroundColor","backgroundBlendMode","d","key","onSwipe","bind","onSwipeLeft","onSwipeRight","onDoubleTap","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","SwipePage","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,oC,6ECA3C,IAAIC,EAAM,CACT,eAAgB,GAChB,oBAAqB,GACrB,cAAe,IAIhB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBN,EAAOC,QAAUE,EACjBA,EAAeE,GAAK,I,gBCxBpBL,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,mICoH3Bc,M,kDA5Gd,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAEDC,MAAQ,CACXC,KAAM,GACNC,YAAY,EACZC,aAAY,EACZC,YAAY,GAPE,E,gEAqBlB,IALA,IAAIC,EAAU,CACZ,aACA,mBAEEC,EAAW,GACNC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAASE,KAAKH,EAAQI,KAAKC,MAAMD,KAAKE,SAASN,EAAQO,UAC/C,IAALL,GACDM,KAAKC,SAAS,CACZb,KAAMK,M,8BAKJL,GACNc,QAAQC,IAAI,mB,kCAGFf,GAEV,GADAc,QAAQC,IAAI,sBACTf,EAAKgB,SAAS,cAAc,CAC7B,IAAIC,EAAYL,KAAKb,MAAMI,YAAa,EACxB,GAAbc,EACDL,KAAKC,SAAS,CACZX,aAAY,IAIdU,KAAKC,SAAS,CACZV,YAAYc,O,mCAOPjB,GACXc,QAAQC,IAAI,uBACTf,EAAKgB,SAAS,gBACfJ,KAAKC,SAAS,CACZX,aAAY,M,kCAKNF,GACVc,QAAQC,IAAI,0B,+BAGJ,IAAD,OACDG,EAoCV,SAAmBC,GACjB,IAAID,EAAS,GAEb,OADAC,EAAEzB,OAAOV,KAAI,SAACoC,EAAMC,GAAYH,EAAOE,EAAKE,QAAQ,KAAM,KAAOH,EAAEC,MAC5DF,EAvCUK,CAAUC,OAIzB,OACEZ,KAAKb,MAAMG,YAAa,2BAAOuB,UAAQ,EAACC,MAAI,EAACC,IAAKC,IAAcC,MAAO,SACvE,kBAAC,IAAD,CAEAC,MACE,CAACC,gBAAgB,OAAD,OAAQb,EAAO,aAAf,KAChBc,gBAAiB,qBAAqB,EAAGpB,KAAKb,MAAMI,YAAa,EAAE,IAAK,IACxE8B,oBAAqB,YAKpBrB,KAAKb,MAAMC,KAAKhB,KAAI,SAACkD,GAAD,OACnB,kBAAC,IAAD,CACEJ,MACE,CAACC,gBAAgB,OAAD,OAAQb,EAAOgB,GAAf,MAElBC,IAAKD,EACLlC,KAAMkC,EACNE,QAAS,EAAKA,QAAQC,KAAK,GAC3BC,YAAa,EAAKA,YAAYD,KAAK,GACnCE,aAAc,EAAKA,aAAaF,KAAK,GACrCG,YAAa,EAAKA,YAAYH,KAAK,a,GA9FzBI,aCMFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.10fca6ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/coffin.11b61240.mp4\";","var map = {\n\t\"./corona.png\": 21,\n\t\"./coronavirus.png\": 22,\n\t\"./stare.png\": 23\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 20;","module.exports = __webpack_public_path__ + \"static/media/corona.21aaa9de.png\";","module.exports = __webpack_public_path__ + \"static/media/coronavirus.80ce1ac3.png\";","module.exports = __webpack_public_path__ + \"static/media/stare.c0aa3ddd.png\";","import React, { Component } from 'react'\nimport { render } from 'react-dom'\nimport { Card, CardWrapper } from 'react-swipeable-cards';\nimport coffin_video from './assets/coffin.mp4'\n \n\nclass Example extends Component {\n\n  constructor(props){\n    super(props);\n    \n    this.state = {\n      data: [],\n      openDialog: false,\n      failChecker:false,\n      missCounter:0\n    }\n    \n}\n\n\n\n\ncomponentDidMount(){\n  var myArray = [\n    \"corona.png\",\n    \"coronavirus.png\",\n  ];\n  var tempData = []\n  for (var i = 0; i < 50; i++) {\n    tempData.push(myArray[Math.floor(Math.random()*myArray.length)])\n    if(i == 49){\n      this.setState({\n        data: tempData\n      })\n    }\n  }\n}\n  onSwipe(data) {\n    console.log(\"I was swiped.\");\n  }\n\n  onSwipeLeft(data) {\n    console.log(\"I was swiped left.\");\n    if(data.includes(\"corona.png\")){\n      var tempCount = this.state.missCounter +1\n      if(tempCount == 5){\n        this.setState({\n          failChecker:true\n        })\n      }\n      else{\n        this.setState({\n          missCounter:tempCount\n        })\n      }\n\n    }\n  }\n\n  onSwipeRight(data) {\n    console.log(\"I was swiped right.\");\n    if(data.includes(\"coronavirus\")){\n      this.setState({\n        failChecker:true\n      })\n    }\n  }\n\n  onDoubleTap(data) {\n    console.log(\"I was double tapped.\");\n  }\n  \n  render() {\n    const images = importAll(require.context('./assets', false, /\\.(png|jpe?g|svg)$/));\n    \n\n\n    return(\n      this.state.failChecker? <video autoPlay loop src={coffin_video} width={'100%'} /> :\n      <CardWrapper\n\n      style={\n        {backgroundImage:`url(${images['stare.png']})`,\n        backgroundColor: \"rgba(255,255,255,\"+(1-(this.state.missCounter)/5+0.5)+\")\",\n        backgroundBlendMode: \"lighten\"\n\n      }\n      }\n      >\n        {this.state.data.map((d) => (\n          <Card\n            style={\n              {backgroundImage:`url(${images[d]})`}\n            }\n            key={d}\n            data={d}\n            onSwipe={this.onSwipe.bind(this)}\n            onSwipeLeft={this.onSwipeLeft.bind(this)}\n            onSwipeRight={this.onSwipeRight.bind(this)}\n            onDoubleTap={this.onDoubleTap.bind(this)}>\n          </Card>\n        ))}\n      </CardWrapper>\n          \n    );\n  }\n}\n\n\nfunction importAll(r) {\n  let images = {};\n  r.keys().map((item, index) => { images[item.replace('./', '')] = r(item); });\n  return images;\n}\n\nexport default (Example);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SwipePage from './SwipePage';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SwipePage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}